{% extends 'base.html.twig' %}

{% block title %}Réserver - {{ screening.film.name }}{% endblock %}

{% block body %}
    <div class="max-w-4xl mx-auto p-6 space-y-6">


        <div class="bg-white rounded shadow p-4 space-y-2 text-center sm:text-left">
            <h1 class="text-2xl font-bold text-gray-800">{{ screening.film.name }}</h1>
            <p class="text-gray-600">Salle n° <strong>{{ screening.room.number }}</strong></p>
            <p class="text-gray-600">Places totales : {{ screening.room.seats }}</p>
            <p class="text-gray-600">Places disponibles : {{ available }}</p>
        </div>


        <div class="bg-white rounded shadow p-4">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Choisissez vos places :</h2>

            <div id="seat-map" class="grid grid-cols-5 sm:grid-cols-8 md:grid-cols-10 gap-2 justify-center">
                {% for seat in 1..screening.room.seats %}
                    <div class="seat w-10 h-10 border border-gray-600 flex items-center justify-center text-sm text-gray-700 rounded hover:bg-green-200 cursor-pointer"
                         data-seat-number="{{ seat }}">
                        {{ seat }}
                    </div>
                {% endfor %}
            </div>

            <div class="flex justify-center mt-6">
                <button id="reserve-btn"
                        class="bg-red-600 text-white font-semibold px-6 py-2 rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-red-700 transition"
                        disabled>
                    Réserver
                </button>
            </div>
        </div>
    </div>


    <style>
        .seat.reserved {
            background-color: #d9534f !important;
            color: white;
            cursor: not-allowed;
        }
        .seat.selected {
            background-color: #5cb85c !important;
            color: white;
        }
    </style>

    <script>
        const screeningId = {{ screening.id }};
        const seatMap = document.getElementById('seat-map');
        const reserveBtn = document.getElementById('reserve-btn');
        let selectedSeats = [];

        // Charger les places déjà réservées depuis la BDD
        fetch(`/screening/{{ screening.id }}/reserved-seats`)
            .then(res => res.json())
            .then(data => {
                console.log(data);
                const reservedSeats = data.reservedSeats || [];
                document.querySelectorAll('.seat').forEach(seat => {
                    const seatNumber = parseInt(seat.dataset.seatNumber);
                    if (reservedSeats.includes(seatNumber)) {
                        seat.classList.add('reserved');
                    }
                });
            });

        seatMap.addEventListener('click', e => {
            const seat = e.target;
            if (!seat.classList.contains('seat')) return;

            // Si la place est réservée, on ne peut pas la sélectionner
            if (seat.style.backgroundColor === 'rgb(217, 83, 79)') return;

            const seatNumber = parseInt(seat.dataset.seatNumber);

            if (selectedSeats.includes(seatNumber)) {
                // Désélectionner
                selectedSeats = selectedSeats.filter(n => n !== seatNumber);
                seat.style.backgroundColor = '';
            } else {
                // Sélectionner
                selectedSeats.push(seatNumber);
                seat.style.backgroundColor = '#5cb85c'; //vert pour marquer que c'est sélectionné
            }

            reserveBtn.disabled = selectedSeats.length === 0;
        });

        reserveBtn.addEventListener('click', () => {
            if (selectedSeats.length === 0) return;

            //envoie donnée côté serveur
            fetch('/screening/{{ screening.id }}/reserve', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ seats: selectedSeats }),
            })
                .then(async res => {
                    const contentType = res.headers.get('content-type');
                    const text = await res.text();
                    //génére erreur et affiche le texte de l'erreur comme sur symfony dans la console
                    if (!contentType || !contentType.includes('application/json')) {
                        console.error('Réponse non JSON :', text);
                        throw new Error('Réponse non JSON du serveur');
                    }

                    return JSON.parse(text);
                })
                .then(data => {
                    if (data.checkoutUrl) {
                        window.location.href = data.checkoutUrl;
                    } else if (data.redirectUrl) {
                        window.location.href = data.redirectUrl;
                    } else {
                        alert('Erreur : ' + (data.message || ''));
                    }
                })
                .catch(err => {
                    alert('Erreur JS : ' + err.message);
                });

        });
    </script>




{% endblock %}
